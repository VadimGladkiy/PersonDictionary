@model PersonDictionary.Infrastructure.NotesViewModel
@using PersonDictionary.Infrastructure
@{
    Layout = null;
}
<!DOCTYPE html>
<html>
<head>
    <meta name="viewport" content="width=device-width" charset="utf-8" />
    <title>Index</title>
    <script src="~/Scripts/jquery-3.2.1.min.js"></script>
    <script src="~/Scripts/jquery.unobtrusive-ajax.min.js"></script>
    <link href="~/Styles/bootstrap.min.css" rel="stylesheet" />
    <link href="~/StylesDemo/Index_styles.css" rel="stylesheet" />
</head>
<body>
    <header>
        <div id="header_info">
        <i>
            This is a personal page - a collection of web pages, 
            with content that describes the sphere of interest of a person.
        </i>
        <i>
            The user has the rights to log out, to view,            
            to change any personal information.
        </i>
        </div>
        <div id="log_out_block">
            @Html.ActionLink(linkText: "LogOut",
         actionName: "LogOut", controllerName: "Home")
            <img src="~/StylesDemoContent/exit_log.png" width="60" alt="Exit.png" />
        </div>
    </header>
    <div id="person_info">
        <br />
        <h3>person info</h3>
        <p> Id:
            @Html.DisplayFor(e => e.Person.Id)
        </p>
        <p> login:
            @Html.DisplayFor(e => e.Person.login)
        </p>
        <p> Name:
            @Html.DisplayFor(e => e.Person.Name)
        </p>
        <p> Email:
            @Html.DisplayFor(e => e.Person.eMail)
        </p>
        <p> Foto:
        @if (Model.Person.Foto != null)
        {
            @Html.Raw("<img style='width:120px; height:160px;' src=\"data:image/jpeg;base64,"
                                          + Convert.ToBase64String(Model.Person.Foto) + "\" />")
        }
        else
        {
            <img alt="Place for a photo" />
        }
        </p>
        <div>
            @using (Html.BeginForm("DownloadFoto", "Account", FormMethod.Post,
                htmlAttributes:
                new { enctype = "multipart/form-data" }
                ))
            {
                @Html.AntiForgeryToken()
                <fieldset>
                    <legend>Upload a new photo</legend>

                    <div class="editor-field">
                        <input type="file" name="uploadFile" />
                    </div>
                    <div class="editor-field">
                        <input type="submit" value="Upload" />
                    </div>
                </fieldset>
                <br />
            }
        </div>
    </div>
    <div id="Notes">
        <br />
        <h4>Notes:</h4>
        @{Html.RenderPartial("GetNotesOnPage",Model.Person.Notes);}
        
        <div class="btn-group">
            @Html.PageLinks(Model.PageInfo, x => Url.Action("Index", new { pageNumber = x }))
        </div>
    </div>
    <div>
        <br />
        @using (Html.BeginForm("AddNote", "Account", FormMethod.Post))
        {
            
            <textarea name="newNote" rows="8" cols="70"
                maxlength="500" required>
            </textarea>
            <br />
            <input type="submit" value="Create a new note" />
        }
        
    </div>
</body>
</html>
<script>
    var itemsOnPage = 5; // хардкод
    var dataContainer = $('#notesBunch');
    $(document).ready(function ()
    {        
        //var notesCount = @ViewData["notesCount"];    
        /*$.ajax({
            method: "Get",
            contentType: "application/json; charset=utf-8",
            url: "/Account/GetNotesOnPage/{pageNumber}/{pageSize}",
            dataType: "json",
            data: { pageNumber: "1" },
            success: function()
            {
                console.log("success");
            }            
        });
        */
    });
    function GetAllNotes()
    {
        $.ajax({
            method:  "Get",
            url: "/Account/GetAllNotes",
            dataType: "html",
            success: function(data)
            {
                $(data).appendTo("#notesBunch");
            },
            error: function()
            {
                alert("error to insert a bunch");
            }
        });
    }
    function CreateLinks(count, onPage)
    {
        if(count != 0){
            var numb = Math.round((count/onPage)+0.5);
            console.log("numb: "+numb);
            for(var i =0; i< numb; i++)
            {
                linksHandlers(
                $("<a href='' class='linksNotesManage' id='a"+(i+1)+"'>"+(i+1)+"</a>")
                    .appendTo("#links"));
            }
        }
        return numb;
    }
    function GetBunch(page, itemsOnPage)
    {
        $.ajax({
            method:  "Get",
            url: "/Account/GetNotesOnPage/"+page+"/5",
            dataType: "html",
                
            success: function(data)
            {
                $(data).appendTo("#notesBunch");
            },
            error: function()
            {
                alert("error to insert a bunch");
            }
        });
    }
    function linksHandlers(link)
    {
        var page = $(link).text();
        console.log("page: "+ page);
        link.on('click',function()
        {
            event.preventDefault();
            $("#notesBunch").children().remove(); 
            GetBunch(page, itemsOnPage);
            return false;
        });
    }
    function DeleteNote(event, el)
    {
        event = event || window.event // кросс-браузерно
        event.preventDefault();
        var id = $(el).parent().attr("id");
        console.log(typeof $(this).parent());       
        console.log("id: "+id);
        $.ajax({
            method: "Delete",
            url: "/Account/DelNote/"+id,
            success: function()
            {
                alert("success del in front");
            },
            error: function()
            {
                alert("error del in front");
            }            
        });
    }
</script>
